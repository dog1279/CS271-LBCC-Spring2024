// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction Type: A or C
    Not(in=instruction[15], out=isAInstruction);
    Mux16(a=instruction, b=false, sel=isAInstruction, out[loadA, 0..14]=AInput, out[15]=null);

    // A Register
    ARegister(in=AInput, load=loadA, out=A, out[0..14]=addressM);

    // Decode C-instruction
    // comp (ALU control), dest, and jump fields
    CInstructionDecoder(instruction=instruction, d=loadD, a=loadA, m=writeM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, jgt=jgt, jeq=jeq, jlt=jlt);

    // ALU
    ALU(x=D, y=ALUyInput, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUOut, zr=zr, ng=ng);
    Mux16(a=A, b=inM, sel=instruction[12], out=ALUyInput); // instruction[12] decides between A or M

    // D Register
    DRegister(in=ALUOut, load=loadD, out=D);

    // Write to M
    Mux16(a=ALUOut, b=false, sel=writeM, out=outM);

    // Jump Control
    JumpControl(ng=ng, zr=zr, jgt=jgt, jeq=jeq, jlt=jlt, out=shouldJump);

    // Program Counter
    PC(in=A, inc=true, load=shouldJump, reset=reset, out=pc);
}